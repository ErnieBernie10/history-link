//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Impact = newImpactTable("public", "impact", "")

type impactTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	RecordID    postgres.ColumnString
	Description postgres.ColumnString
	Value       postgres.ColumnInteger
	Category    postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ImpactTable struct {
	impactTable

	EXCLUDED impactTable
}

// AS creates new ImpactTable with assigned alias
func (a ImpactTable) AS(alias string) *ImpactTable {
	return newImpactTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ImpactTable with assigned schema name
func (a ImpactTable) FromSchema(schemaName string) *ImpactTable {
	return newImpactTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ImpactTable with assigned table prefix
func (a ImpactTable) WithPrefix(prefix string) *ImpactTable {
	return newImpactTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ImpactTable with assigned table suffix
func (a ImpactTable) WithSuffix(suffix string) *ImpactTable {
	return newImpactTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newImpactTable(schemaName, tableName, alias string) *ImpactTable {
	return &ImpactTable{
		impactTable: newImpactTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newImpactTableImpl("", "excluded", ""),
	}
}

func newImpactTableImpl(schemaName, tableName, alias string) impactTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		RecordIDColumn    = postgres.StringColumn("record_id")
		DescriptionColumn = postgres.StringColumn("description")
		ValueColumn       = postgres.IntegerColumn("value")
		CategoryColumn    = postgres.IntegerColumn("category")
		allColumns        = postgres.ColumnList{IDColumn, RecordIDColumn, DescriptionColumn, ValueColumn, CategoryColumn}
		mutableColumns    = postgres.ColumnList{RecordIDColumn, DescriptionColumn, ValueColumn, CategoryColumn}
	)

	return impactTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		RecordID:    RecordIDColumn,
		Description: DescriptionColumn,
		Value:       ValueColumn,
		Category:    CategoryColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
