//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Record = newRecordTable("public", "record", "")

type recordTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	Title        postgres.ColumnString
	Description  postgres.ColumnString
	Location     postgres.ColumnString
	Significance postgres.ColumnString
	URL          postgres.ColumnString
	StartDate    postgres.ColumnTimestamp
	EndDate      postgres.ColumnTimestamp
	Type         postgres.ColumnInteger
	Status       postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RecordTable struct {
	recordTable

	EXCLUDED recordTable
}

// AS creates new RecordTable with assigned alias
func (a RecordTable) AS(alias string) *RecordTable {
	return newRecordTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RecordTable with assigned schema name
func (a RecordTable) FromSchema(schemaName string) *RecordTable {
	return newRecordTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RecordTable with assigned table prefix
func (a RecordTable) WithPrefix(prefix string) *RecordTable {
	return newRecordTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RecordTable with assigned table suffix
func (a RecordTable) WithSuffix(suffix string) *RecordTable {
	return newRecordTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRecordTable(schemaName, tableName, alias string) *RecordTable {
	return &RecordTable{
		recordTable: newRecordTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newRecordTableImpl("", "excluded", ""),
	}
}

func newRecordTableImpl(schemaName, tableName, alias string) recordTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		TitleColumn        = postgres.StringColumn("title")
		DescriptionColumn  = postgres.StringColumn("description")
		LocationColumn     = postgres.StringColumn("location")
		SignificanceColumn = postgres.StringColumn("significance")
		URLColumn          = postgres.StringColumn("url")
		StartDateColumn    = postgres.TimestampColumn("start_date")
		EndDateColumn      = postgres.TimestampColumn("end_date")
		TypeColumn         = postgres.IntegerColumn("type")
		StatusColumn       = postgres.IntegerColumn("status")
		allColumns         = postgres.ColumnList{IDColumn, TitleColumn, DescriptionColumn, LocationColumn, SignificanceColumn, URLColumn, StartDateColumn, EndDateColumn, TypeColumn, StatusColumn}
		mutableColumns     = postgres.ColumnList{TitleColumn, DescriptionColumn, LocationColumn, SignificanceColumn, URLColumn, StartDateColumn, EndDateColumn, TypeColumn, StatusColumn}
	)

	return recordTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Title:        TitleColumn,
		Description:  DescriptionColumn,
		Location:     LocationColumn,
		Significance: SignificanceColumn,
		URL:          URLColumn,
		StartDate:    StartDateColumn,
		EndDate:      EndDateColumn,
		Type:         TypeColumn,
		Status:       StatusColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
