//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var RecordHistory = newRecordHistoryTable("public", "record_history", "")

type recordHistoryTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	RecordID     postgres.ColumnString
	Title        postgres.ColumnString
	Description  postgres.ColumnString
	Location     postgres.ColumnString
	Significance postgres.ColumnString
	URL          postgres.ColumnString
	StartDate    postgres.ColumnTimestamp
	EndDate      postgres.ColumnTimestamp
	Type         postgres.ColumnInteger
	Status       postgres.ColumnInteger
	CreatedAt    postgres.ColumnTimestamp
	UpdatedAt    postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RecordHistoryTable struct {
	recordHistoryTable

	EXCLUDED recordHistoryTable
}

// AS creates new RecordHistoryTable with assigned alias
func (a RecordHistoryTable) AS(alias string) *RecordHistoryTable {
	return newRecordHistoryTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RecordHistoryTable with assigned schema name
func (a RecordHistoryTable) FromSchema(schemaName string) *RecordHistoryTable {
	return newRecordHistoryTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RecordHistoryTable with assigned table prefix
func (a RecordHistoryTable) WithPrefix(prefix string) *RecordHistoryTable {
	return newRecordHistoryTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RecordHistoryTable with assigned table suffix
func (a RecordHistoryTable) WithSuffix(suffix string) *RecordHistoryTable {
	return newRecordHistoryTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRecordHistoryTable(schemaName, tableName, alias string) *RecordHistoryTable {
	return &RecordHistoryTable{
		recordHistoryTable: newRecordHistoryTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newRecordHistoryTableImpl("", "excluded", ""),
	}
}

func newRecordHistoryTableImpl(schemaName, tableName, alias string) recordHistoryTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		RecordIDColumn     = postgres.StringColumn("record_id")
		TitleColumn        = postgres.StringColumn("title")
		DescriptionColumn  = postgres.StringColumn("description")
		LocationColumn     = postgres.StringColumn("location")
		SignificanceColumn = postgres.StringColumn("significance")
		URLColumn          = postgres.StringColumn("url")
		StartDateColumn    = postgres.TimestampColumn("start_date")
		EndDateColumn      = postgres.TimestampColumn("end_date")
		TypeColumn         = postgres.IntegerColumn("type")
		StatusColumn       = postgres.IntegerColumn("status")
		CreatedAtColumn    = postgres.TimestampColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampColumn("updated_at")
		allColumns         = postgres.ColumnList{IDColumn, RecordIDColumn, TitleColumn, DescriptionColumn, LocationColumn, SignificanceColumn, URLColumn, StartDateColumn, EndDateColumn, TypeColumn, StatusColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns     = postgres.ColumnList{RecordIDColumn, TitleColumn, DescriptionColumn, LocationColumn, SignificanceColumn, URLColumn, StartDateColumn, EndDateColumn, TypeColumn, StatusColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return recordHistoryTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		RecordID:     RecordIDColumn,
		Title:        TitleColumn,
		Description:  DescriptionColumn,
		Location:     LocationColumn,
		Significance: SignificanceColumn,
		URL:          URLColumn,
		StartDate:    StartDateColumn,
		EndDate:      EndDateColumn,
		Type:         TypeColumn,
		Status:       StatusColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
