//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Source = newSourceTable("public", "source", "")

type sourceTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	RecordID    postgres.ColumnString
	Title       postgres.ColumnString
	Type        postgres.ColumnInteger
	URL         postgres.ColumnString
	Description postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SourceTable struct {
	sourceTable

	EXCLUDED sourceTable
}

// AS creates new SourceTable with assigned alias
func (a SourceTable) AS(alias string) *SourceTable {
	return newSourceTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SourceTable with assigned schema name
func (a SourceTable) FromSchema(schemaName string) *SourceTable {
	return newSourceTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SourceTable with assigned table prefix
func (a SourceTable) WithPrefix(prefix string) *SourceTable {
	return newSourceTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SourceTable with assigned table suffix
func (a SourceTable) WithSuffix(suffix string) *SourceTable {
	return newSourceTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSourceTable(schemaName, tableName, alias string) *SourceTable {
	return &SourceTable{
		sourceTable: newSourceTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newSourceTableImpl("", "excluded", ""),
	}
}

func newSourceTableImpl(schemaName, tableName, alias string) sourceTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		RecordIDColumn    = postgres.StringColumn("record_id")
		TitleColumn       = postgres.StringColumn("title")
		TypeColumn        = postgres.IntegerColumn("type")
		URLColumn         = postgres.StringColumn("url")
		DescriptionColumn = postgres.StringColumn("description")
		allColumns        = postgres.ColumnList{IDColumn, RecordIDColumn, TitleColumn, TypeColumn, URLColumn, DescriptionColumn}
		mutableColumns    = postgres.ColumnList{RecordIDColumn, TitleColumn, TypeColumn, URLColumn, DescriptionColumn}
	)

	return sourceTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		RecordID:    RecordIDColumn,
		Title:       TitleColumn,
		Type:        TypeColumn,
		URL:         URLColumn,
		Description: DescriptionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
