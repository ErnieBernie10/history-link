//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Link = newLinkTable("public", "link", "")

type linkTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	RecordID  postgres.ColumnString
	RecordId2 postgres.ColumnString
	Strength  postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LinkTable struct {
	linkTable

	EXCLUDED linkTable
}

// AS creates new LinkTable with assigned alias
func (a LinkTable) AS(alias string) *LinkTable {
	return newLinkTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LinkTable with assigned schema name
func (a LinkTable) FromSchema(schemaName string) *LinkTable {
	return newLinkTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LinkTable with assigned table prefix
func (a LinkTable) WithPrefix(prefix string) *LinkTable {
	return newLinkTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LinkTable with assigned table suffix
func (a LinkTable) WithSuffix(suffix string) *LinkTable {
	return newLinkTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLinkTable(schemaName, tableName, alias string) *LinkTable {
	return &LinkTable{
		linkTable: newLinkTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newLinkTableImpl("", "excluded", ""),
	}
}

func newLinkTableImpl(schemaName, tableName, alias string) linkTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		RecordIDColumn  = postgres.StringColumn("record_id")
		RecordId2Column = postgres.StringColumn("record_id2")
		StrengthColumn  = postgres.IntegerColumn("strength")
		allColumns      = postgres.ColumnList{IDColumn, RecordIDColumn, RecordId2Column, StrengthColumn}
		mutableColumns  = postgres.ColumnList{RecordIDColumn, RecordId2Column, StrengthColumn}
	)

	return linkTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		RecordID:  RecordIDColumn,
		RecordId2: RecordId2Column,
		Strength:  StrengthColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
