// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: commands.sql

package data

import (
	"context"
	"database/sql"
	"time"
)

const createSubject = `-- name: CreateSubject :one
insert into subjects (
        id,
        title,
        summary,
        subject_type,
        url,
        weight,
        from_date,
        until_date
    )
values (?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id
`

type CreateSubjectParams struct {
	ID          string
	Title       string
	Summary     string
	SubjectType sql.NullString
	Url         string
	Weight      sql.NullInt64
	FromDate    time.Time
	UntilDate   time.Time
}

func (q *Queries) CreateSubject(ctx context.Context, arg CreateSubjectParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createSubject,
		arg.ID,
		arg.Title,
		arg.Summary,
		arg.SubjectType,
		arg.Url,
		arg.Weight,
		arg.FromDate,
		arg.UntilDate,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const createSubjectImpact = `-- name: CreateSubjectImpact :exec
insert into impacts (id, subject_id, reasoning, category, value)
values (?, ?, ?, ?, ?)
`

type CreateSubjectImpactParams struct {
	ID        string
	SubjectID string
	Reasoning string
	Category  string
	Value     int64
}

func (q *Queries) CreateSubjectImpact(ctx context.Context, arg CreateSubjectImpactParams) error {
	_, err := q.db.ExecContext(ctx, createSubjectImpact,
		arg.ID,
		arg.SubjectID,
		arg.Reasoning,
		arg.Category,
		arg.Value,
	)
	return err
}
