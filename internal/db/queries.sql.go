// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package data

import (
	"context"
)

const getSubject = `-- name: GetSubject :one
select id, title, summary, subject_type, url, weight, from_date, until_date from subjects where id = ?
`

func (q *Queries) GetSubject(ctx context.Context, id string) (Subject, error) {
	row := q.db.QueryRowContext(ctx, getSubject, id)
	var i Subject
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Summary,
		&i.SubjectType,
		&i.Url,
		&i.Weight,
		&i.FromDate,
		&i.UntilDate,
	)
	return i, err
}

const getSubjects = `-- name: GetSubjects :many
select id, title, summary, subject_type, url, weight, from_date, until_date from subjects
`

func (q *Queries) GetSubjects(ctx context.Context) ([]Subject, error) {
	rows, err := q.db.QueryContext(ctx, getSubjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subject
	for rows.Next() {
		var i Subject
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Summary,
			&i.SubjectType,
			&i.Url,
			&i.Weight,
			&i.FromDate,
			&i.UntilDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
